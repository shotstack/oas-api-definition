openapi: 3.0.0
info:
  title: Shotstack
  version: v1
  description: >-
    Shotstack is a video, image and audio editing service that allows for the automated
    generation of videos, images and audio using JSON and a RESTful API.


    You arrange and configure an edit and POST it to the API which will render your media and provide a file 
    location when complete.


    For more details visit [shotstack.io](https://shotstack.io) or checkout our
    [getting started](https://shotstack.io/docs/guide/) documentation.

    There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets
    (Serve API).


    The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>
    
    
    The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>

servers:
  - url: https://api.shotstack.io/{version}
    variables:
      version:
        description: >-
          Set the stage to `v1` for production usage without watermarks. Set to `stage` to use the development sandbox.
        enum:
          - v1
          - stage
        default: v1
  - url: https://api.shotstack.io/serve/{version}
    variables:
      version:
        description: >-
          Set the stage to `v1` for production usage. Set to `stage` to use the development sandbox.
        enum:
          - v1
          - stage
        default: v1
paths:
  /render:
    post:
      responses:
        "201":
          description: The queued render details
          content:
            application/json:
              example:
                success: true
                message: Created
                response:
                  message: Render Successfully Queued
                  id: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
              schema:
                $ref: "#/components/schemas/QueuedResponse"
      description: >-
        Queue and render the contents of a timeline as a video, image or audio file.


        **Base URL:** https://api.shotstack.io/{version}
      summary: Render Asset
      operationId: postRender
      requestBody:
        description: >-
          The video, image or audio edit specified using JSON.
        content:
          application/json:
            example:
              timeline:
                soundtrack:
                  src: "https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3"
                  effect: fadeInFadeOut
                background: "#000000"
                tracks:
                  - clips:
                      - asset:
                          type: title
                          text: Hello World
                          style: minimal
                        start: 0
                        length: 4
                        transition:
                          in: fade
                          out: fade
                        effect: slideRight
                      - asset:
                          type: image
                          src: >-
                            https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-image.jpg
                        start: 3
                        length: 4
                        effect: zoomIn
                        filter: greyscale
                  - clips:
                      - asset:
                          type: video
                          src: >-
                            https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-1.mp4
                          trim: 10.5
                        start: 7
                        length: 4.5
                      - asset:
                          type: video
                          src: >-
                            https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-2.mp4
                          volume: 0.5
                        start: 11.5
                        length: 5
                        transition:
                          out: wipeLeft
              output:
                format: mp4
                resolution: sd
            schema:
              $ref: "#/components/schemas/Edit"
        required: true
      security:
        - DeveloperKey: []
      tags:
        - Edit
  /render/{id}:
    get:
      responses:
        "200":
          description: The render status details
          content:
            application/json:
              example:
                success: true
                message: OK
                response:
                  status: rendering
                  id: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
                  owner: 5ca6hu7s9k
                  url: >-
                    https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                  data:
                    timeline:
                      soundtrack:
                        src: >-
                          https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3
                        effect: fadeInFadeOut
                      background: "#000000"
                      tracks:
                        - clips:
                            - asset:
                                type: title
                                text: Hello World
                                style: minimal
                              start: 0
                              length: 4
                              transition:
                                in: fade
                                out: fade
                              effect: slideRight
                            - asset:
                                type: image
                                src: >-
                                  https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-image.jpg
                              start: 3
                              length: 4
                              effect: zoomIn
                              filter: greyscale
                        - clips:
                            - asset:
                                type: video
                                src: >-
                                  https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-1.mp4
                                trim: 10.5
                              start: 7
                              length: 4.5
                            - asset:
                                type: video
                                src: >-
                                  https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-2.mp4
                                volume: 0.5
                              start: 11.5
                              length: 5
                              transition:
                                out: wipeLeft
                    output:
                      format: mp4
                      resolution: sd
                  created: "2020-10-30T09:42:29.446Z"
                  updated: "2020-10-30T09:42:39.168Z"
              schema:
                $ref: "#/components/schemas/RenderResponse"
      description: >-
        Get the rendering status, temporary asset url and details of a render by ID.


        **Base URL:** https://api.shotstack.io/{version}
      operationId: getRender
      summary: Get Render Status
      security:
        - DeveloperKey: []
      tags:
        - Edit
    parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The id of the timeline render task in UUID format
      - in: query
        name: data
        schema:
          type: boolean
        description: >-
          Include the data parameter in the response. The data parameter includes the original
          timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default
          is currently `true`, this is deprecated and the default will soon be `false`. If you
          rely on the data being returned in the response you should explicitly set the
          parameter to `true`.
        example: false
      - in: query
        name: merged
        schema:
          type: boolean
        description: >-
          Used when data is set to true, it will show the [merge fields](#tocs_mergefield)
          merged in to the data response.
        example: false
  /probe/{url}:
    get:
      responses:
        200:
          description: FFprobe response formatted as JSON.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeResponse"
      description: >-
        Inspects any media asset (image, video, audio) on the internet using a hosted version
        of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information
        about an asset such as width, height, duration, rotation, framerate, etc...


        **Base URL:** https://api.shotstack.io/{version}
      operationId: probe
      summary: Inspect Media
      security:
        - DeveloperKey: []
      tags:
        - Edit
    parameters:
      - in: path
        name: url
        required: true
        schema:
          type: string
        description: The URL of the media to inspect, must be **URL encoded**.
  /assets/{id}:
    get:
      responses:
        "200":
          description: Get asset by asset id
          content:
            application/json:
              example:
                response:
                  data:
                    type: asset
                    attributes:
                      id: a4482cbf-e321-42a2-ac8b-947d26886840
                      owner: 5ca6hu7s9k
                      region: au
                      renderId: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
                      filename: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                      url: https://cdn.shotstack.io/au/v1/msgtwx8iw6/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                      status: ready
                      created: "2021-05-06T03:33:48.600Z"
                      updated: "2021-05-06T03:33:49.521Z"
              schema:
                $ref: "#/components/schemas/AssetResponse"
      description: >-
        The Serve API is used to interact with, and delete hosted assets including videos, images, audio files, 
        thumbnails and poster images. Use this endpoint to fetch an asset by asset id. Note that an asset id is unique
        for each asset and different from the render id.


        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: getAsset
      summary: Get Asset
      security:
        - DeveloperKey: []
      tags:
        - Serve
    delete:
      responses:
        "204":
          description: An empty response signifying the asset has been deleted
      description: >-
        Delete an asset by its asset id. If a render creates multiple assets, such as thumbnail and poster images,
        each asset must be deleted individually by the asset id.


        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: deleteAsset
      summary: Delete Asset
      security:
        - DeveloperKey: []
      tags:
        - Serve
    parameters:
      - name: id
        in: path
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The id of the asset in UUID format
  /assets/render/{id}:
    get:
      responses:
        "200":
          description: Get one or more assets by render id
          content:
            application/json:
              example:
                response:
                  data:
                    - type: asset
                      attributes:
                        id: a4482cbf-e321-42a2-ac8b-947d26886840
                        owner: 5ca6hu7s9k
                        region: au
                        renderId: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
                        filename: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                        url: https://cdn.shotstack.io/au/v1/msgtwx8iw6/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                        status: ready
                        created: "2021-05-06T03:33:48.600Z"
                        updated: "2021-05-06T03:33:49.521Z"
              schema:
                $ref: "#/components/schemas/AssetRenderResponse"
      description: >-
        A render may generate more than one file, such as a video, thumbnail and poster image. When the assets are
        created the only known id is the render id returned by the original [render request](#render-video), status 
        request or webhook. This endpoint lets you look up one or more assets by the render id.


        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: getAssetByRenderId
      summary: Get Asset by Render ID
      security:
        - DeveloperKey: []
      tags:
        - Serve
    parameters:
      - name: id
        in: path
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The render id associated with the asset in UUID format
components:
  schemas:
    Edit:
      description: >-
        An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output
        format.
      properties:
        timeline:
          $ref: "#/components/schemas/Timeline"
        output:
          $ref: "#/components/schemas/Output"
        merge:
          description: >-
            An array of key/value pairs that provides an easy way to create templates with placeholders.
            The placeholders can be used to find and replace keys with values. For example you can search
            for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
          type: array
          items:
            $ref: "#/components/schemas/MergeField"
        callback:
          type: string
          description: >-
            An optional webhook callback URL used to receive status notifications
            when a render completes or fails.
            See [webhooks](https://shotstack.io/docs/guide/architecting-an-application/webhooks) for 
            more details.
          example: https://my-server.com/callback.php
        disk:
          description: >-
            The disk type to use for storing footage and assets for each render.
            See [disk types](https://shotstack.io/docs/guide/architecting-an-application/disk-types)
            for more details.
            <ul>
              <li>`local` - optimized for high speed rendering with up to 512MB storage</li>
              <li>`mount` - optimized for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li>
            </ul>
          type: string
          enum:
            - local
            - mount
          default: local
      required:
        - timeline
        - output
      type: object
    Timeline:
      description: >-
        A timeline represents the contents of a video edit over time, an audio edit over time, in
        seconds, or an image layout. A timeline consists of layers called tracks. Tracks are
        composed of titles, images, audio, html or video segments referred to as clips which
        are placed along the track at specific starting point and lasting for a
        specific amount of time.
      properties:
        soundtrack:
          description: A music or audio soundtrack file in mp3 format.
          $ref: "#/components/schemas/Soundtrack"
        background:
          description: >-
            A hexadecimal value for the timeline background colour. Defaults to
            #000000 (black).
          type: string
          default: "#000000"
        fonts:
          description: An array of custom fonts to be downloaded for use by the HTML assets.
          type: array
          items:
            $ref: "#/components/schemas/Font"
        tracks:
          description: >-
            A timeline consists of an array of tracks, each track containing
            clips. Tracks are layered on top of each other in the same order
            they are added to the array with the top most track layered over the
            top of those below it. Ensure that a track containing titles is the
            top most track so that it is displayed above videos and images.
          type: array
          items:
            $ref: "#/components/schemas/Track"
        cache:
          description: >-
            Disable the caching of ingested source footage and assets. See 
            [caching](https://shotstack.io/docs/guide/architecting-an-application/caching) for more details.
          type: boolean
          default: true
      required:
        - tracks
      type: object
    Soundtrack:
      description: >-
        A music or audio file in mp3 format that plays for the duration of the
        rendered video or the length of the audio file, which ever is shortest.
      properties:
        src:
          description: >-
            The URL of the mp3 audio file. The URL must be publicly accessible
            or include credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3
        effect:
          description: >-
            The effect to apply to the audio file
            <ul>
              <li>`fadeIn` - fade volume in only</li>
              <li>`fadeOut` - fade volume out only</li>
              <li>`fadeInFadeOut` - fade volume in and out</li>
            </ul>
          enum:
            - fadeIn
            - fadeOut
            - fadeInFadeOut
          type: string
        volume:
          description: >-
            Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1
            is full volume (defaults to 1).
          type: number
          default: 1
      required:
        - src
      type: object
    Font:
      description: >-
        Download a custom font to use with the HTML asset type, using the font name in the CSS or font tag. See our
        [custom fonts](https://shotstack.io/learn/html-custom-fonts/) getting started guide for more details.
      properties:
        src:
          description: The URL of the font file. The URL must be publicly accessible or include credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/open-sans.ttf
      required:
        - src
      type: object
    Track:
      description: >-
        A track contains an array of clips. Tracks are layered on top of each
        other in the order in the array. The top most track will render on top
        of those below it.
      properties:
        clips:
          description: "An array of Clips comprising of TitleClip, ImageClip or VideoClip."
          type: array
          items:
            $ref: "#/components/schemas/Clip"
      required:
        - clips
      type: object
    Clip:
      description: >-
        A clip is a container for a specific type of asset, i.e. a title, image, video,
        audio or html. You use a Clip to define when an asset will display on the
        timeline, how long it will play for and transitions, filters and effects to apply
        to it.
      properties:
        asset:
          description: >-
            The type of asset to display for the duration of this Clip. Value
            must be one of:
              <ul>
                <li><a href="#tocs_videoasset">VideoAsset</a></li>
                <li><a href="#tocs_imageasset">ImageAsset</a></li>
                <li><a href="#tocs_titleasset">TitleAsset</a></li>
                <li><a href="#tocs_htmlasset">HtmlAsset</a></li>
                <li><a href="#tocs_audioasset">AudioAsset</a></li>
                <li><a href="#tocs_lumaasset">LumaAsset</a></li>
              </ul>
          oneOf:
            - $ref: "#/components/schemas/VideoAsset"
            - $ref: "#/components/schemas/ImageAsset"
            - $ref: "#/components/schemas/TitleAsset"
            - $ref: "#/components/schemas/HtmlAsset"
            - $ref: "#/components/schemas/AudioAsset"
            - $ref: "#/components/schemas/LumaAsset"
        start:
          description: The start position of the Clip on the timeline, in seconds.
          type: number
          example: 2
        length:
          description: The length, in seconds, the Clip should play for.
          type: number
          example: 5
        fit:
          default: crop
          description: >-
            Set how the asset should be scaled to fit the viewport using one of the following options: 
              <ul>
                <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>
                <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>
                <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>
                <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>
              </ul>
          enum:
            - cover
            - contain
            - crop
            - none
          type: string
        scale:
          description: >-
            Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale
            asset to half the size of the viewport. This is useful for picture-in-picture video and 
            scaling images such as logos and watermarks.
          type: number
          example: 0
        position:
          default: center
          description: >-
            Place the asset in one of nine predefined positions of the viewport. This is most effective
            for when the asset is scaled and you want to position the element to a specific position.
            <ul>
              <li>`top` - top (center)</li>
              <li>`topRight` - top right</li>
              <li>`right` - right (center)</li>
              <li>`bottomRight` - bottom right</li>
              <li>`bottom` - bottom (center)</li>
              <li>`bottomLeft` - bottom left</li>
              <li>`left` - left (center)</li>
              <li>`topLeft` - top left</li>
              <li>`center` - center</li>
            </ul>
          enum:
            - top
            - topRight
            - right
            - bottomRight
            - bottom
            - bottomLeft
            - left
            - topLeft
            - center
          type: string
        offset:
          description: >-
            Offset the location of the asset relative to its position on the
            viewport. The offset distance is relative to the width of the viewport -
            for example an x offset of 0.5 will move the asset half the viewport width
            to the right.
          $ref: "#/components/schemas/Offset"
        transition:
          $ref: "#/components/schemas/Transition"
        effect:
          description: >-
            A motion effect to apply to the Clip.
            <ul>
              <li>`zoomIn` - slow zoom in</li>
              <li>`zoomOut` - slow zoom out</li>
              <li>`slideLeft` - slow slide (pan) left</li>
              <li>`slideRight` - slow slide (pan) right</li>
              <li>`slideUp` - slow slide (pan) up</li>
              <li>`slideDown` - slow slide (pan) down</li>
            </ul>
          enum:
            - zoomIn
            - zoomOut
            - slideLeft
            - slideRight
            - slideUp
            - slideDown
          type: string
        filter:
          description: >-
            A filter effect to apply to the Clip.
            <ul>
              <li>`boost` - boost contrast and saturation</li>
              <li>`contrast` - increase contrast</li>
              <li>`darken` - darken the scene</li>
              <li>`greyscale` - remove colour</li>
              <li>`lighten` - lighten the scene</li>
              <li>`muted` - reduce saturation and contrast</li>
              <li>`invert` - invert colors</li>
            </ul>
          enum:
            - boost
            - contrast
            - darken
            - greyscale
            - lighten
            - muted
            - negative
          type: string
          example: greyscale
        opacity:
          description: Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
          type: number
          default: 1
        transform:
          description: >-
            A transformation lets you modify the visual properties of a clip. Available
            transformations are <b>rotate</b>, <b>skew</b> and <b>flip</b>. Transformations
            can be combined to create interesting new shapes and effects.
          $ref: "#/components/schemas/Transformation"
      required:
        - asset
        - start
        - length
      type: object
    VideoAsset:
      description: >-
        The VideoAsset is used to create video sequences from video files. The
        src must be a publicly accessible URL to a video resource such as an mp4
        file.
      type: object
      properties:
        type:
          default: video
          description: The type of asset - set to `video` for videos.
          type: string
        src:
          description: >-
            The video source URL. The URL must be publicly accessible or include
            credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/video.mp4
        trim:
          description: >-
            The start trim point of the video clip, in seconds (defaults to 0). Videos
            will start from the in trim point. The video will play until the
            file ends or the Clip length is reached.
          type: number
          example: 2
        volume:
          description: >-
            Set the volume for the video clip between 0 and 1 where 0 is muted and 1
            is full volume (defaults to 0).
          type: number
          example: 1
        crop:
          $ref: "#/components/schemas/Crop"
      required:
        - type
        - src
    ImageAsset:
      description: >-
        The ImageAsset is used to create video from images to compose an image. The src must be a
        publicly accessible URL to an image resource such as a jpg or png file.
      type: object
      properties:
        type:
          default: image
          description: The type of asset - set to `image` for images.
          type: string
        src:
          description: >-
            The image source URL. The URL must be publicly accessible or include
            credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/image.jpg
        crop:
          $ref: "#/components/schemas/Crop"
      required:
        - type
        - src
    TitleAsset:
      description: >-
        The TitleAsset clip type lets you create video titles from a text string
        and apply styling and positioning.
      type: object
      properties:
        type:
          default: title
          description: The type of asset - set to `title` for titles.
          type: string
        text:
          description: The title text string - i.e. "My Title".
          type: string
          example: Hello World
        style:
          description: >-
            Uses a preset to apply font properties and styling to the title.
            <ul>
              <li>`minimal`</li>
              <li>`blockbuster`</li>
              <li>`vogue`</li>
              <li>`sketchy`</li>
              <li>`skinny`</li>
              <li>`chunk`</li>
              <li>`chunkLight`</li>
              <li>`marker`</li>
              <li>`future`</li>
              <li>`subtitle`</li>
            </ul>
          enum:
            - minimal
            - blockbuster
            - vogue
            - sketchy
            - skinny
            - chunk
            - chunkLight
            - marker
            - future
            - subtitle
          type: string
        color:
          default: "#ffffff"
          description: >-
            Set the text color using hexadecimal color notation. Transparency is supported by setting the
            first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 
            50% transparency.
          type: string
        size:
          default: medium
          description: >-
            Set the relative size of the text using predefined sizes from
            xx-small to xx-large.
            <ul>
              <li>`xx-small`</li>
              <li>`x-small`</li>
              <li>`small`</li>
              <li>`medium`</li>
              <li>`large`</li>
              <li>`x-large`</li>
              <li>`xx-large`</li>
            </ul>
          enum:
            - xx-small
            - x-small
            - small
            - medium
            - large
            - x-large
            - xx-large
          type: string
        background:
          description: >-
            Apply a background color behind the text. Set the text color using hexadecimal color notation.
            Transparency is supported by setting the first two characters of the hex string (opposite to HTML), 
            i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.
          type: string
          example: "#000000"
        position:
          default: center
          description: >-
            Place the title in one of nine predefined positions of the viewport.
            <ul>
              <li>`top` - top (center)</li>
              <li>`topRight` - top right</li>
              <li>`right` - right (center)</li>
              <li>`bottomRight` - bottom right</li>
              <li>`bottom` - bottom (center)</li>
              <li>`bottomLeft` - bottom left</li>
              <li>`left` - left (center)</li>
              <li>`topLeft` - top left</li>
              <li>`center` - center</li>
            </ul>
          enum:
            - top
            - topRight
            - right
            - bottomRight
            - bottom
            - bottomLeft
            - left
            - topLeft
            - center
          type: string
        offset:
          description: >-
            Offset the location of the title relative to its position on the
            screen.
          $ref: "#/components/schemas/Offset"
      required:
        - type
        - text
    HtmlAsset:
      description: >-
        The HtmlAsset clip type lets you create text based layout and formatting using
        HTML and CSS. You can also set the height and width of a bounding box for the HTML
        content to sit within. Text and elements will wrap within the bounding box.
      type: object
      properties:
        type:
          default: html
          description: The type of asset - set to `html` for HTML.
          type: string
        html:
          description: >-
            The HTML text string. See list of
            [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
          type: string
          example: "<p>Hello <b>World</b></p>"
        css:
          description: >-
            The CSS text string to apply styling to the HTML. See list of 
            [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
          type: string
          example: "p { color: #ffffff; } b { color: #ffff00; }"
        width:
          description: >-
            Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
          type: integer
          example: 400
        height:
          description: >-
            Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the 
            height of the bounding box.
          type: integer
          example: 200
        background:
          description: >-
            Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal 
            color notation. Transparency is supported by setting the first two characters of the hex string 
            (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
          type: string
          default: transparent
        position:
          default: center
          description: >-
            Place the HTML in one of nine predefined positions within the HTML area.
            <ul>
              <li>`top` - top (center)</li>
              <li>`topRight` - top right</li>
              <li>`right` - right (center)</li>
              <li>`bottomRight` - bottom right</li>
              <li>`bottom` - bottom (center)</li>
              <li>`bottomLeft` - bottom left</li>
              <li>`left` - left (center)</li>
              <li>`topLeft` - top left</li>
              <li>`center` - center</li>
            </ul>
          enum:
            - top
            - topRight
            - right
            - bottomRight
            - bottom
            - bottomLeft
            - left
            - topLeft
            - center
          type: string
      required:
        - type
        - html
    AudioAsset:
      description: >-
        The AudioAsset is used to add sound effects and audio at specific intervals on
        the timeline. The src must be a publicly accessible URL to an audio resource such 
        as an mp3 file.
      type: object
      properties:
        type:
          default: audio
          description: The type of asset - set to `audio` for audio assets.
          type: string
        src:
          description: >-
            The audio source URL. The URL must be publicly accessible or include
            credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/sound.mp3
        trim:
          description: >-
            The start trim point of the audio clip, in seconds (defaults to 0). Audio
            will start from the in trim point. The audio will play until the
            file ends or the Clip length is reached.
          type: number
        volume:
          description: >-
            Set the volume for the audio clip between 0 and 1 where 0 is muted and 1
            is full volume (defaults to 1).
          type: number
          default: 1
        effect:
          description: >-
            The effect to apply to the audio asset
            <ul>
              <li>`fadeIn` - fade volume in only</li>
              <li>`fadeOut` - fade volume out only</li>
              <li>`fadeInFadeOut` - fade volume in and out</li>
            </ul>
          enum:
            - fadeIn
            - fadeOut
            - fadeInFadeOut
          type: string
      required:
        - type
        - src
    LumaAsset:
      description: >-
        The LumaAsset is used to create luma matte masks, transitions and effects between other assets.
        A luma matte is a grey scale image or animated video where the black areas are transparent and the white
        areas solid. The luma matte animation should be provided as an mp4 video file. The src must be a
        publicly accessible URL to the file.
      type: object
      properties:
        type:
          default: luma
          description: The type of asset - set to `luma` for luma mattes.
          type: string
        src:
          description: >-
            The luma matte source URL. The URL must be publicly accessible or include
            credentials.
          type: string
          example: https://s3-ap-northeast-1.amazonaws.com/my-bucket/mask.mp4
        trim:
          description: >-
            The start trim point of the luma matte clip, in seconds (defaults to 0). Videos
            will start from the in trim point. A luma matte video will play until the
            file ends or the Clip length is reached.
          type: number
      required:
        - type
        - src
    Transition:
      description: In and out transitions for a clip - i.e. fade in and fade out
      properties:
        in:
          description: >-
            The transition in. Available transitions are:
              <ul>
                <li>`fade` - fade in</li>
                <li>`reveal` - reveal from left to right</li>
                <li>`wipeLeft` - fade across screen to the left</li>
                <li>`wipeRight` - fade across screen to the right</li>
                <li>`slideLeft` - move slightly left and fade in</li>
                <li>`slideRight` - move slightly right and fade in</li>
                <li>`slideUp` - move slightly up and fade in</li>
                <li>`slideDown` - move slightly down and fade in</li>
                <li>`carouselLeft` - slide in from right to left</li>
                <li>`carouselRight` - slide in from left to right</li>
                <li>`carouselUp` - slide in from bottom to top</li>
                <li>`carouselDown` - slide in from top to bottom</li>
                <li>`shuffleTopRight` - rotate in from top right</li>
                <li>`shuffleRightTop` - rotate in from right top</li>
                <li>`shuffleRightBottom` - rotate in from right bottom</li>
                <li>`shuffleBottomRight` - rotate in from bottom right</li>
                <li>`shuffleBottomLeft` - rotate in from bottom left</li>
                <li>`shuffleLeftBottom` - rotate in from left bottom</li>
                <li>`shuffleLeftTop` - rotate in from left top</li>
                <li>`shuffleTopLeft` - rotate in from top left</li>
                <li>`zoom` - fast zoom in</li>
              </ul>
            The transition speed can also be controlled by appending `Fast` or `Slow`
            to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
          enum:
            - fade
            - fadeSlow
            - fadeFast
            - reveal
            - revealSlow
            - revealFast
            - wipeLeft
            - wipeLeftSlow
            - wipeLeftFast
            - wipeRight
            - wipeRightSlow
            - wipeRightFast
            - slideLeft
            - slideLeftSlow
            - slideLeftFast
            - slideRight
            - slideRightSlow
            - slideRightFast
            - slideUp
            - slideUpSlow
            - slideUpFast
            - slideDown
            - slideDownSlow
            - slideDownFast
            - carouselLeft
            - carouselLeftSlow
            - carouselLeftFast
            - carouselRight
            - carouselRightSlow
            - carouselRightFast
            - carouselUp
            - carouselUpSlow
            - carouselUpFast
            - carouselDown
            - carouselDownSlow
            - carouselDownFast
            - shuffleTopRight
            - shuffleTopRightSlow
            - shuffleTopRightFast
            - shuffleRightTop
            - shuffleRightTopSlow
            - shuffleRightTopFast
            - shuffleRightBottom
            - shuffleRightBottomSlow
            - shuffleRightBottomFast
            - shuffleBottomRight
            - shuffleBottomRightSlow
            - shuffleBottomRightFast
            - shuffleBottomLeft
            - shuffleBottomLeftSlow
            - shuffleBottomLeftFast
            - shuffleLeftBottom
            - shuffleLeftBottomSlow
            - shuffleLeftBottomFast
            - shuffleLeftTop
            - shuffleLeftTopSlow
            - shuffleLeftTopFast
            - shuffleTopLeft
            - shuffleTopLeftSlow
            - shuffleTopLeftFast
            - zoom
          type: string
        out:
          description: >-
            The transition out. Available transitions are:
              <ul>
                <li>`fade` - fade out</li>
                <li>`reveal` - reveal from right to left</li>
                <li>`wipeLeft` - fade across screen to the left</li>
                <li>`wipeRight` - fade across screen to the right</li>
                <li>`slideLeft` - move slightly left and fade out</li>
                <li>`slideRight` - move slightly right and fade out</li>
                <li>`slideUp` - move slightly up and fade out</li>
                <li>`slideDown` - move slightly down and fade out</li>
                <li>`carouselLeft` - slide out from right to left</li>
                <li>`carouselRight` - slide out from left to right</li>
                <li>`carouselUp` - slide out from bottom to top</li>
                <li>`carouselDown` - slide out from top  to bottom</li>
                <li>`shuffleTopRight` - rotate out from top right</li>
                <li>`shuffleRightTop` - rotate out from right top</li>
                <li>`shuffleRightBottom` - rotate out from right bottom</li>
                <li>`shuffleBottomRight` - rotate out from bottom right</li>
                <li>`shuffleBottomLeft` - rotate out from bottom left</li>
                <li>`shuffleLeftBottom` - rotate out from left bottom</li>
                <li>`shuffleLeftTop` - rotate out from left top</li>
                <li>`shuffleTopLeft` - rotate out from top left</li>
                <li>`zoom` - fast zoom out</li>
              </ul>
            The transition speed can also be controlled by appending `Fast` or `Slow`
            to the transition, e.g. `fadeFast` or `CarouselLeftSlow`.
          enum:
            - fade
            - fadeSlow
            - fadeFast
            - reveal
            - revealSlow
            - revealFast
            - wipeLeft
            - wipeLeftSlow
            - wipeLeftFast
            - wipeRight
            - wipeRightSlow
            - wipeRightFast
            - slideLeft
            - slideLeftSlow
            - slideLeftFast
            - slideRight
            - slideRightSlow
            - slideRightFast
            - slideUp
            - slideUpSlow
            - slideUpFast
            - slideDown
            - slideDownSlow
            - slideDownFast
            - carouselLeft
            - carouselLeftSlow
            - carouselLeftFast
            - carouselRight
            - carouselRightSlow
            - carouselRightFast
            - carouselUp
            - carouselUpSlow
            - carouselUpFast
            - carouselDown
            - carouselDownSlow
            - carouselDownFast
            - shuffleTopRight
            - shuffleTopRightSlow
            - shuffleTopRightFast
            - shuffleRightTop
            - shuffleRightTopSlow
            - shuffleRightTopFast
            - shuffleRightBottom
            - shuffleRightBottomSlow
            - shuffleRightBottomFast
            - shuffleBottomRight
            - shuffleBottomRightSlow
            - shuffleBottomRightFast
            - shuffleBottomLeft
            - shuffleBottomLeftSlow
            - shuffleBottomLeftFast
            - shuffleLeftBottom
            - shuffleLeftBottomSlow
            - shuffleLeftBottomFast
            - shuffleLeftTop
            - shuffleLeftTopSlow
            - shuffleLeftTopFast
            - shuffleTopLeft
            - shuffleTopLeftSlow
            - shuffleTopLeftFast
            - zoom
          type: string
      type: object
    Offset:
      description: >-
        Offsets the position of an asset horizontally or vertically by a
        relative distance.
      properties:
        x:
          description: >-
            Offset an asset on the horizontal axis (left or right), range varies
            from -1 to 1. Positive numbers move the asset right, negative left.
            For all assets except titles the distance moved is relative to the width 
            of the viewport - i.e. an X offset of 0.5 will move the asset half the 
            screen width to the right.
          type: number
          format: float
          minimum: -1
          maximum: 1
          default: 0
          example: 0.1
        y:
          description: >-
            Offset an asset on the vertical axis (up or down), range varies from
            -1 to 1. Positive numbers move the asset up, negative down.
            For all assets except titles the distance moved is relative to the height 
            of the viewport - i.e. an Y offset of 0.5 will move the asset up half the 
            screen height.
          type: number
          format: float
          minimum: -1
          maximum: 1
          default: 0
          example: -0.2
      type: object
    Crop:
      description: >-
        Crop the sides of an asset by a relative amount. The size of the crop is specified using a scale between 0 and
        1, relative to the screen width - i.e a left crop of 0.5 will crop half of the asset from the left, a top crop 
        of 0.25 will crop the top by quarter of the asset.
      properties:
        top:
          description: Crop from the top of the asset
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.15
        bottom:
          description: Crop from the bottom of the asset
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.15
        left:
          description: Crop from the left of the asset
          type: number
          format: float
          minimum: 0
          maximum: 1
        right:
          description: Crop from the left of the asset
          type: number
          format: float
          minimum: 0
          maximum: 1
      type: object
    Transformation:
      description: >-
        Apply one or more transformations to a clip. Transformations alter the visual
        properties of a clip and can be combined to create new shapes and effects.
      type: object
      properties:
        rotate: 
          $ref: "#/components/schemas/RotateTransformation"
        skew:
          $ref: "#/components/schemas/SkewTransformation"
        flip:
          $ref: "#/components/schemas/FlipTransformation"
    RotateTransformation:
      description: >-
        Rotate a clip by the specified angle in degrees. Rotation origin
        is set based on the clips `position`.
      type: object
      properties:
        angle:
          description: >-
            The angle to rotate the clip. Can be 0 to 360, or 0 to -360. Using a
            positive number rotates the clip clockwise, negative numbers
            counter-clockwise.
          type: integer
          default: 0
          example: 45
    SkewTransformation:
      description: >-
        Skew a clip so its edges are sheared at an angle. Use values between 0 and 3.
        Over 3 the clip will be skewed almost flat.
      type: object
      properties:
        x:
          description: Skew the clip along it's x axis.
          type: number
          format: float
          default: 0
          example: 0.5
        y:
          description: Skew the clip along it's y axis.
          type: number
          format: float
          default: 0
          example: 0.5
    FlipTransformation:
      description: >-
        Flip a clip vertically or horizontally. Acts as a mirror effect of the clip along
        the selected plane.
      type: object
      properties:
        horizontal:
          description: Flip a clip horizontally.
          type: boolean
          default: false
          example: true
        vertical:
          description: Flip a clip vertically.
          type: boolean
          default: false
          example: true
    MergeField:
      description: >-
        A merge field consists of a key; `find`, and a value; `replace`. Merge fields can be used to replace placeholders
        within the JSON edit to create re-usable templates. Placeholders should be a string with double brace delimiters,
        i.e. `"{{NAME}}"`. A placeholder can be used for any value within the JSON edit.
      type: object
      properties:
        find:
          description: The string to find <u>without</u> delimiters.
          type: string
          example: NAME
        replace:
          description: >-
            The replacement value. The replacement can be any valid JSON type -
            string, boolean, number, etc...
          example: Jane
      required:
        - find
        - replace
    Output:
      description: The output format, render range and type of media to generate.
      properties:
        format:
          description: >-
            The output format and type of media file to generate.
            <ul>
              <li>`mp4` - mp4 video file</li>
              <li>`gif` - animated gif</li>
              <li>`jpg` - jpg image file</li>
              <li>`png` - png image file</li>
              <li>`bmp` - bmp image file</li>
              <li>`mp3` - mp3 audio file (audio only)</li>
            </ul>
          enum:
            - mp4
            - gif
            - mp3
            - jpg
            - png
            - bmp
          type: string
          example: mp4
        resolution:
          description: >-
            The output resolution of the video or image.
            <ul>
              <li>`preview` - 512px x 288px @ 15fps</li>
              <li>`mobile` - 640px x 360px @ 25fps</li>
              <li>`sd` - 1024px x 576px @ 25fps</li>
              <li>`hd` - 1280px x 720px @ 25fps</li>
              <li>`1080` - 1920px x 1080px @ 25fps</li>
            </ul>
          enum:
            - preview
            - mobile
            - sd
            - hd
            - "1080"
          type: string
          example: sd
        aspectRatio:
          description: >-
            The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are:
            <ul>
              <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>
              <li>`9:16` - vertical/portrait aspect ratio</li>
              <li>`1:1` - square aspect ratio</li>
              <li>`4:5` - short vertical/portrait aspect ratio</li>
              <li>`4:3` - legacy TV aspect ratio</li>
            </ul>
          enum:
            - "16:9"
            - "9:16"
            - "1:1"
            - "4:5"
            - "4:3"
          type: string
          example: "16:9"
        size:
          $ref: "#/components/schemas/Size"
        fps:
          description: >-
            Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on 
            mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file
            size/faster render times or animated gifs (12 or 15fps). Default is 25fps.
            <ul>
              <li>`12` - 12fps</li>
              <li>`15` - 15fps</li>
              <li>`24` - 24fps</li>
              <li>`23.976` - 23.976fps</li>
              <li>`25` - 25fps</li>
              <li>`29.97` - 29.97fps</li>
              <li>`30` - 30fps</li>
            </ul>
          enum:
            - 12
            - 15
            - 23.976
            - 24
            - 25
            - 29.97
            - 30
          type: number
          example: 25
        scaleTo:
          description: >-
            Override the resolution and scale the video or image to render at a different size. When using scaleTo the
            asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use
            scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you
            want to create multiple asset sizes.
            <ul>
              <li>`preview` - 512px x 288px @ 15fps</li>
              <li>`mobile` - 640px x 360px @ 25fps</li>
              <li>`sd` - 1024px x 576px @25fps</li>
              <li>`hd` - 1280px x 720px @25fps</li>
              <li>`1080` - 1920px x 1080px @25fps</li>
            </ul>
          enum:
            - preview
            - mobile
            - sd
            - hd
            - "1080"
          type: string
        quality:
          description: >-
            Adjust the output quality of the video, image or audio. Adjusting quality affects 
            render speed, download speeds and storage requirements due to file size.
            The default `medium` provides the most optimized choice for all three 
            factors.
            <ul>
              <li>`low` - slightly reduced quality, smaller file size</li>
              <li>`medium` - optimized quality, render speeds and file size</li>
              <li>`high` - slightly increased quality, larger file size</li>
            </ul>
          enum:
            - low
            - medium
            - high
          type: string
          example: medium
          default: medium
        repeat:
          description: Loop settings for gif files. Set to `true` to loop, `false` to play only once.
          type: boolean
          example: true
          default: true
        range:
          $ref: "#/components/schemas/Range"
        poster:
          description: >-
            Generate a poster image from a specific point on the timeline.
          $ref: "#/components/schemas/Poster"
        thumbnail:
          description: >-
            Generate a thumbnail image from a specific point on the timeline.
          $ref: "#/components/schemas/Thumbnail"
        destinations:
          description: >-
            A destination is a location where output files can be sent to for serving or hosting. By default all
            rendered assets are automatically sent to the 
            [Shotstack hosting destination](https://shotstack.io/docs/guide/serving-assets/hosting). You can add other
            destinations to send assets to. The following destinations are available:
              <ul>
                <li><a href="#tocs_shotstackdestination">DestinationShotstack</a></li>
                <li><a href="#tocs_muxdestination">DestinationMux</a></li>
              </ul>
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/ShotstackDestination"
              - $ref: "#/components/schemas/MuxDestination"
      required:
        - format
      type: object
    Size:
      description: >-
        Set a custom size for a video or image. When using a custom size omit the
        `resolution` and `aspectRatio`. Custom sizes must be divisible by 2 based
        on the encoder specifications.
      properties:
        width:
          description: >-
            Set a custom width for the video or image file. Value must be divisible
            by 2. Maximum video width is 1920px, maximum image width is 4096px.
          type: integer
          minimum: 0
          maximum: 4096
          example: 1200
        height:
          description: >-
            Set a custom height for the video or image file. Value must be divisible
            by 2. Maximum video height is 1920px, maximum image height is 4096px.
          type: integer
          minimum: 0
          maximum: 4096
          example: 800
      type: object
    Range:
      description: >-
        Specify a time range to render, i.e. to render only a portion of a video or audio file. Omit this setting to 
        export the entire video. Range can also be used to render a frame at a specific time point - setting a range and
        output format as `jpg` will output a single frame image at the range `start` point.
      properties:
        start:
          description: >-
            The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
          type: number
          format: float
          minimum: 0
          example: 3
        length:
          description: >-
            The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
          type: number
          format: float
          minimum: 0
          example: 6
      type: object
    Poster:
      description: >-
        Generate a poster image for the video at a specific point from the timeline. The poster image size
        will match the size of the output video.
      properties:
        capture:
          description: The point on the timeline in seconds to capture a single frame to use as the poster image.
          type: number
          example: 1
      required:
        - capture
      type: object
    Thumbnail:
      description: Generate a thumbnail image for the video or image at a specific point from the timeline.
      properties:
        capture:
          description: The point on the timeline in seconds to capture a single frame to use as the thumbnail image.
          type: number
          example: 1
        scale:
          description: >-
            Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale 
            the thumbnail to half the size of the viewport.
          type: number
          example: 0.3
      required:
        - capture
        - scale
      type: object
    ShotstackDestination:
      description: >-
        Send rendered assets to the Shotstack hosting and CDN service. This destination is enabled by default.
      properties:
        provider:
          description: The destination to send rendered assets to - set to `shotstack` for Shotstack hosting and CDN.
          type: string
          default: shotstack
          example: shotstack
        exclude:
          description: >-
            Set to `true` to opt-out from the Shotstack hosting and CDN service. All files must be downloaded within
            24 hours of rendering.
          type: boolean
          default: false
          example: false
      type: object
      required:
        - provider
    MuxDestination:
      description: >-
        Send rendered videos to the [Mux](https://www.mux.com/) video hosting and streaming service. Add the
        `mux` destination provider to send the output video to Mux. Mux credentials are required and added via
        the [dashboard](https://dashboard.shotstack.io/integrations/mux), not in the request.
      properties:
        provider:
          description: The destination to send rendered assets to - set to `mux` for Mux.
          type: string
          default: mux
          example: mux
        options:
          description: Additional Mux configuration and features.
          $ref: "#/components/schemas/MuxDestinationOptions"
      type: object
      required:
        - provider
    MuxDestinationOptions:
      description: >-
        Pass additional options to control how Mux processes video. Currently supports playback policy option.
      properties:
        playbackPolicy:
          description: Sets the Mux `playback_policy` option. Value is an array of strings - use `public`, `signed`, or
            both.
          type: array
          items:
            type: string
            enum:
              - public
              - signed
    QueuedResponse:
      description: >-
        The response received after a [render request](#render-asset) is submitted. The render task is queued for
        rendering and a unique render id is returned.
      properties:
        success:
          description: "`true` if successfully queued, else `false`."
          type: boolean
          example: true
        message:
          description: "`Created`, `Bad Request` or an error message."
          type: string
          example: Created
        response:
          description: "`QueuedResponseData` or an error message."
          $ref: "#/components/schemas/QueuedResponseData"
      required:
        - success
        - message
        - response
      type: object
    QueuedResponseData:
      description: The response data returned with the [QueuedResponse](#tocs_queuedresponse).
      properties:
        message:
          description: Success response message or error details.
          type: string
          example: Render Successfully Queued
        id:
          description: The id of the render task in UUID format.
          type: string
          example: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
      required:
        - message
        - id
      type: object
    RenderResponse:
      description: >-
        The response received after a [render status request](#get-render-status) is submitted. The response includes 
        details about status of a render and the output URL.
      properties:
        success:
          description: "`true` if status available, else `false`."
          type: boolean
          example: true
        message:
          description: "`OK` or an error message."
          type: string
          example: OK
        response:
          description: "`RenderResponse` or an error message."
          $ref: "#/components/schemas/RenderResponseData"
      required:
        - success
        - message
        - response
      type: object
    RenderResponseData:
      description: The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
      properties:
        id:
          description: The id of the render task in UUID format.
          type: string
          example: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
        owner:
          description: The owner id of the render task.
          type: string
          example: 5ca6hu7s9k
        plan:
          description: The customer subscription plan.
          type: string
          example: basic
        status:
          description: >-
            The status of the render task.
            <ul>
              <li>`queued` - render is queued waiting to be rendered</li>
              <li>`fetching` - assets are being fetched</li>
              <li>`rendering` - the asset is being rendered</li>
              <li>`saving` - the final asset is being saved to storage</li>
              <li>`done` - the asset is ready to be downloaded</li>
              <li>`failed` - there was an error rendering the asset</li>
            </ul>
          enum:
            - queued
            - fetching
            - rendering
            - saving
            - done
            - failed
          type: string
          example: done
        error:
          description: An error message, only displayed if an error occurred.
          type: string
          example: ""
        duration:
          description: The output video or audio length in seconds.
          type: number
          example: 8.50
        renderTime:
          description: The time taken to render the asset in milliseconds.
          type: number
          example: 9433.44
        url:
          description: >-
            The URL of the final asset. This will only be available if status is done. This is a temporary URL and will
            be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
          type: string
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
        poster:
          description: The URL of the poster image if requested. This will only be available if status is done.
          type: string
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-poster.jpg
        thumbnail:
          description: The URL of the thumbnail image if requested. This will only be available if status is done.
          type: string
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-thumb.jpg
        data:
          description: The timeline and output data to be rendered.
          $ref: "#/components/schemas/Edit"
        created:
          description: The time the render task was initially queued.
          type: string
          example: "2020-10-30T09:42:29.446Z"
        updated:
          description: The time the render status was last updated.
          type: string
          example: "2020-10-30T09:42:39.168Z"
      required:
        - status
        - id
        - owner
        - data
        - created
        - updated
      type: object
    ProbeResponse:
      description: >-
        The response received after a [probe request](#inspect-media) is submitted. The probe requests returns data from FFprobe
        formatted as JSON.
      properties:
        success:
          description: "`true` if media successfully read, else `false`."
          type: boolean
          example: true
        message:
          description: "`Created`, `Bad Request` or an error message."
          type: string
          example: Created
        response:
          description: The response from FFprobe in JSON format
          type: object
      required:
        - success
        - message
        - response
      type: object
    AssetResponse:
      description: >-
        The response returned by the Serve API [get asset](#get-asset) request. Includes details of a hosted video,
        image, audio file, thumbnail or poster image. The response follows the [json:api](https://jsonapi.org/)
        specification.
      properties:
        data:
          description: An asset resource.
          $ref: "#/components/schemas/AssetResponseData"
      type: object
    AssetRenderResponse:
      description: >-
        The response returned by the Serve API [get asset by render id](#get-asset-by-render-id) request. The response 
        is an array of asset resources, including video, image, audio, thumbnail and poster image. The response follows 
        the [json:api](https://jsonapi.org/) specification.
      properties:
        data:
          type: array
          description: An array of asset resources grouped by render id.
          items:
            $ref: "#/components/schemas/AssetResponseData"
      type: object
    AssetResponseData:
      description: The type of resource (an asset) and attributes of the asset.
      properties:
        type:
          description: The type of resource, in this case it is an assets.
          type: string
          example: asset
        attributes:
          description: The asset attributes including render id, url, filename, file size, etc...
          $ref: "#/components/schemas/AssetResponseAttributes"
      type: object
    AssetResponseAttributes:
      description: The list of asset attributes and their values.
      properties:
        id:
          description: The unique id of the hosted asset in UUID format.
          type: string
          example: a4482cbf-e321-42a2-ac8b-947d26886840
        owner:
          description: The owner id of the render task.
          type: string
          example: 5ca6hu7s9k
        region:
          description: The region the asset is hosted, currently only `au` (Australia).
          type: string
          example: au
        renderId:
          description: The original render id that created the asset in UUID format. Multiple assets can share the same render id.
          type: string
          example: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
        filename:
          description: The asset file name.
          type: string
          example: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
        url:
          description: The asset file name.
          type: string
          example: https://cdn.shotstack.io/au/v1/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
        status:
          description: >-
            The status of the asset.
            <ul>
              <li>`importing` - the asset is being copied to the hosting service</li>
              <li>`ready` - the asset is ready to be served to users</li>
              <li>`failed` - the asset failed to copy or delete</li>
              <li>`deleted` - the asset has been deleted</li>
            </ul>
          enum:
            - importing
            - ready
            - failed
            - deleted
          type: string
          example: ready
        created:
          description: The time the asset was created.
          type: string
          example: "2021-06-30T09:42:29.446Z"
        updated:
          description: The time the asset status was last updated.
          type: string
          example: "2021-06-30T09:42:30.168Z"
      type: object
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    DeveloperKey:
      description: >-
        Set the **x-api-key** header with your provided key for the correct
        environment (v1 or stage). Include the header in all calls to the API
        that are secured with a key.
      type: apiKey
      in: header
      name: x-api-key
  links: {}
  callbacks: {}
