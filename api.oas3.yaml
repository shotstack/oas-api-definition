openapi: 3.0.1

info:
  title: Shotstack
  version: v1
  description: |
    Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.

    You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.

    For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.

    There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).

    The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>
    
    The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>

servers:
  - url: https://api.shotstack.io/{version}
    variables:
      version:
        description: >-
          Set the stage to `v1` for production usage without watermarks. Set to `stage` to use the development sandbox.
        enum:
          - v1
          - stage
        default: v1
  - url: https://api.shotstack.io/serve/{version}
    variables:
      version:
        description: >-
          Set the stage to `v1` for production usage. Set to `stage` to use the development sandbox.
        enum:
          - v1
          - stage
        default: v1

paths:
  /render:
    post:
      responses:
        "201":
          description: The queued render details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueuedResponse"
      description: |
        Queue and render the contents of an [Edit](#tocs_edit) as a video, image or audio file.

        **Base URL:** https://api.shotstack.io/{version}
      summary: Render Asset
      operationId: postRender
      requestBody:
        description: >-
          The video, image or audio edit specified using JSON.
        content:
          application/json:
            example:
              $ref: "./definitions/edit.yaml"
            schema:
              $ref: "#/components/schemas/Edit"
        required: true
      security:
        - DeveloperKey: []
      tags:
        - Edit

  /render/{id}:
    get:
      responses:
        "200":
          description: The render status details
          content:
            application/json:
              example:
                success: true
                message: OK
                response:
                  status: rendering
                  id: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
                  owner: 5ca6hu7s9k
                  url: >-
                    https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
                  data:
                    $ref: "./definitions/edit.yaml"
                  created: "2020-10-30T09:42:29.446Z"
                  updated: "2020-10-30T09:42:39.168Z"
              schema:
                $ref: "#/components/schemas/RenderResponse"
      description: |
        Get the rendering status, temporary asset url and details of a render by ID.

        **Base URL:** https://api.shotstack.io/{version}
      operationId: getRender
      summary: Get Render Status
      security:
        - DeveloperKey: []
      tags:
        - Edit

    parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The id of the timeline render task in UUID format
      - in: query
        name: data
        schema:
          type: boolean
        description: >-
          Include the data parameter in the response. The data parameter includes the original
          timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default
          is currently `true`, this is deprecated and the default will soon be `false`. If you
          rely on the data being returned in the response you should explicitly set the
          parameter to `true`.
        example: false
      - in: query
        name: merged
        schema:
          type: boolean
        description: >-
          Used when data is set to true, it will show the [merge fields](#tocs_mergefield)
          merged in to the data response.
        example: false

  /templates:
    post:
      description: |
        Save an [Edit](#tocs_edit) as a re-usable template. Templates can be retrieved and modified in your application
        before being rendered. [Merge fields](#tocs_mergefield) can be also used to merge data in to a template and
        [render](#render-template) it in a single request.

        **Base URL:** https://api.shotstack.io/{version}
      summary: Create Template
      operationId: postTemplate
      requestBody:
        description: >-
          Create a template with a name and [Edit](#tocs_edit).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "201":
          description: The saved template status including the id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponse"
      security:
        - DeveloperKey: []
      tags:
        - Edit

    get:
      description: |
        Retrieve a list of templates stored against a users account. The API key is used to determine which templates
        are associated to the user.

        **Base URL:** https://api.shotstack.io/{version}
      summary: List Templates
      operationId: getTemplates
      responses:
        "200":
          description: The list of templates stored against a users account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateListResponse"
      security:
        - DeveloperKey: []
      tags:
        - Edit

  /templates/{id}:
    get:
      description: |
        Retrieve a template by template id.

        **Base URL:** https://api.shotstack.io/{version}
      summary: Retrieve Template
      operationId: getTemplate
      responses:
        "200":
          description: The template details including the [Edit](#tocs_edit)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateDataResponse"
      security:
        - DeveloperKey: []
      tags:
        - Edit

    put:
      description: |
        Update an existing template by template id.

        **Base URL:** https://api.shotstack.io/{version}
      summary: Update Template
      operationId: putTemplate
      requestBody:
        description: >-
          Update an individual templates name and [Edit](#tocs_edit). Both template name and template must be
          provided. If the template parameter is omitted a blank template will be saved.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: Update a templates name and [Edit](#tocs_edit)
          content:
            application/json:
              example:
                success: true
                message: OK
                response:
                  message: Template Successfully Updated
                  id: f5493c17-d01f-445c-bb49-535fae65f219
              schema:
                $ref: "#/components/schemas/TemplateResponse"
      security:
        - DeveloperKey: []
      tags:
        - Edit
    
    delete:
      responses:
        "204":
          description: An empty response signifying the template has been deleted
      description: |
        Delete a template by its template id.

        **Base URL:** https://api.shotstack.io/{version}
      operationId: deleteTemplate
      summary: Delete Template
      security:
        - DeveloperKey: []
      tags:
        - Edit

    parameters:
      - in: path
        name: id
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The id of the template in UUID format

  /templates/render:
    post:
      description: |
        Render an asset from a template id and optional merge fields. Merge fields can be used to replace placeholder
        variables within the [Edit](#tocs_edit).

        **Base URL:** https://api.shotstack.io/{version}
      summary: Render Template
      operationId: postTemplateRender
      requestBody:
        description: >-
          Render a template by template id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateRender"
        required: true
      responses:
        "201":
          description: >-
            The queued status including the render id. Check the status of the render using the id and the 
            [render status](#get-render-status) endpoint.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueuedResponse"
      security:
        - DeveloperKey: []
      tags:
        - Edit

  /probe/{url}:
    get:
      responses:
        200:
          description: FFprobe response formatted as JSON.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeResponse"
      description: |
        Inspects any media asset (image, video, audio) on the internet using a hosted version
        of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information
        about an asset such as width, height, duration, rotation, framerate, etc...

        **Base URL:** https://api.shotstack.io/{version}
      operationId: probe
      summary: Inspect Media
      security:
        - DeveloperKey: []
      tags:
        - Edit

    parameters:
      - in: path
        name: url
        required: true
        schema:
          type: string
        description: The URL of the media to inspect, must be **URL encoded**.

  /assets/{id}:
    get:
      responses:
        "200":
          description: Get asset by asset id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetResponse"
      description: |
        The Serve API is used to interact with, and delete hosted assets including videos, images, audio files, 
        thumbnails and poster images. Use this endpoint to fetch an asset by asset id. Note that an asset id is unique
        for each asset and different from the render id.

        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: getAsset
      summary: Get Asset
      security:
        - DeveloperKey: []
      tags:
        - Serve

    delete:
      responses:
        "204":
          description: An empty response signifying the asset has been deleted
      description: |
        Delete an asset by its asset id. If a render creates multiple assets, such as thumbnail and poster images,
        each asset must be deleted individually by the asset id.

        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: deleteAsset
      summary: Delete Asset
      security:
        - DeveloperKey: []
      tags:
        - Serve

    parameters:
      - name: id
        in: path
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The id of the asset in UUID format

  /assets/render/{id}:
    get:
      responses:
        "200":
          description: Get one or more assets by render id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetRenderResponse"
      description: |
        A render may generate more than one file, such as a video, thumbnail and poster image. When the assets are
        created the only known id is the render id returned by the original [render request](#render-video), status 
        request or webhook. This endpoint lets you look up one or more assets by the render id.

        **Base URL:** https://api.shotstack.io/serve/{version}
      operationId: getAssetByRenderId
      summary: Get Asset by Render ID
      security:
        - DeveloperKey: []
      tags:
        - Serve

    parameters:
      - name: id
        in: path
        required: true
        schema:
          pattern: >-
            ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          type: string
        description: The render id associated with the asset in UUID format

components:
  schemas:
    Edit:
      $ref: "./schemas/edit.yaml#/Edit"

    Timeline:
      $ref: "./schemas/timeline.yaml#/Timeline"

    Soundtrack:
      $ref: "./schemas/soundtrack.yaml#/Soundtrack"

    Font:
      $ref: "./schemas/font.yaml#/Font"

    Track:
      $ref: "./schemas/track.yaml#/Track"

    Clip:
      $ref: "./schemas/clip.yaml#/Clip"

    Asset:
      $ref: "./schemas/asset.yaml#/Asset"

    VideoAsset:
      $ref: "./schemas/videoasset.yaml#/VideoAsset"

    ImageAsset:
      $ref: "./schemas/imageasset.yaml#/ImageAsset"

    TitleAsset:
      $ref: "./schemas/titleasset.yaml#/TitleAsset"

    HtmlAsset:
      $ref: "./schemas/htmlasset.yaml#/HtmlAsset"

    AudioAsset:
      $ref: "./schemas/audioasset.yaml#/AudioAsset"

    LumaAsset:
      $ref: "./schemas/lumaasset.yaml#/LumaAsset"

    Transition:
      $ref: "./schemas/transition.yaml#/Transition"

    Offset:
      $ref: "./schemas/offset.yaml#/Offset"

    Crop:
      $ref: "./schemas/crop.yaml#/Crop"

    Transformation:
      $ref: "./schemas/transformation.yaml#/Transformation"

    RotateTransformation:
      $ref: "./schemas/rotatetransformation.yaml#/RotateTransformation"

    SkewTransformation:
      $ref: "./schemas/skewtransformation.yaml#/SkewTransformation"

    FlipTransformation:
      $ref: "./schemas/fliptransformation.yaml#/FlipTransformation"

    MergeField:
      $ref: "./schemas/mergefield.yaml#/MergeField"

    Output:
      $ref: "./schemas/output.yaml#/Output"

    Size:
      $ref: "./schemas/size.yaml#/Size"

    Range:
      $ref: "./schemas/range.yaml#/Range"

    Poster:
      $ref: "./schemas/poster.yaml#/Poster"

    Thumbnail:
      $ref: "./schemas/thumbnail.yaml#/Thumbnail"

    Destinations:
      $ref: "./schemas/destinations.yaml#/Destinations"

    ShotstackDestination:
      $ref: "./schemas/shotstackdestination.yaml#/ShotstackDestination"

    MuxDestination:
      $ref: "./schemas/muxdestination.yaml#/MuxDestination"

    MuxDestinationOptions:
      $ref: "./schemas/muxdestinationoptions.yaml#/MuxDestinationOptions"

    S3Destination:
      $ref: "./schemas/s3destination.yaml#/S3Destination"

    S3DestinationOptions:
      $ref: "./schemas/s3destinationoptions.yaml#/S3DestinationOptions"

    Template:
      $ref: "./schemas/template.yaml#/Template"

    TemplateRender:
      $ref: "./schemas/templaterender.yaml#/TemplateRender"

    QueuedResponse:
      description: >-
        The response received after a [render request](#render-asset) or [template render](#render-template) is
        submitted. The render task is queued for rendering and a unique render id is returned.
      properties:
        success:
          description: "`true` if successfully queued, else `false`."
          type: boolean
          example: true
        message:
          description: "`Created`, `Bad Request` or an error message."
          type: string
          example: Created
        response:
          description: "`QueuedResponseData` or an error message."
          $ref: "#/components/schemas/QueuedResponseData"
      required:
        - success
        - message
        - response
      type: object

    QueuedResponseData:
      $ref: "./schemas/queuedresponsedata.yaml#/QueuedResponseData"

    RenderResponse:
      description: >-
        The response received after a [render status request](#get-render-status) is submitted. The response includes 
        details about status of a render and the output URL.
      properties:
        success:
          description: "`true` if status available, else `false`."
          type: boolean
          example: true
        message:
          description: "`OK` or an error message."
          type: string
          example: OK
        response:
          description: "`RenderResponse` or an error message."
          $ref: "#/components/schemas/RenderResponseData"
      required:
        - success
        - message
        - response
      type: object

    RenderResponseData:
      description: The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
      properties:
        id:
          description: The id of the render task in UUID format.
          type: string
          example: 2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7
        owner:
          description: The owner id of the render task.
          type: string
          example: 5ca6hu7s9k
        plan:
          description: The customer subscription plan.
          type: string
          example: basic
        status:
          description: >-
            The status of the render task.
            <ul>
              <li>`queued` - render is queued waiting to be rendered</li>
              <li>`fetching` - assets are being fetched</li>
              <li>`rendering` - the asset is being rendered</li>
              <li>`saving` - the final asset is being saved to storage</li>
              <li>`done` - the asset is ready to be downloaded</li>
              <li>`failed` - there was an error rendering the asset</li>
            </ul>
          enum:
            - queued
            - fetching
            - rendering
            - saving
            - done
            - failed
          type: string
          example: done
        error:
          description: An error message, only displayed if an error occurred.
          type: string
          example: ""
        duration:
          description: The output video or audio length in seconds.
          type: number
          example: 8.50
        renderTime:
          description: The time taken to render the asset in milliseconds.
          type: number
          example: 9433.44
        url:
          description: >-
            The URL of the final asset. This will only be available if status is done. This is a temporary URL and will
            be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
          type: string
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4
        poster:
          description: The URL of the poster image if requested. This will only be available if status is done.
          type: string
          nullable: true
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-poster.jpg
        thumbnail:
          description: The URL of the thumbnail image if requested. This will only be available if status is done.
          type: string
          nullable: true
          example: https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-thumb.jpg
        data:
          description: The timeline and output data to be rendered.
          $ref: "#/components/schemas/Edit"
        created:
          description: The time the render task was initially queued.
          type: string
          example: "2020-10-30T09:42:29.446Z"
        updated:
          description: The time the render status was last updated.
          type: string
          example: "2020-10-30T09:42:39.168Z"
      required:
        - status
        - id
        - owner
      type: object

    TemplateResponse:
      description: >-
        The response received after a [template](#create-template) is submitted. The template is saved and a unique
        template id is returned.
      properties:
        success:
          description: "`true` if successfully created, else `false`."
          type: boolean
          example: true
        message:
          description: "`Created`, `Bad Request` or an error message."
          type: string
          example: Created
        response:
          description: "`TemplateResponseData` or an error message."
          $ref: "#/components/schemas/TemplateResponseData"
      required:
        - success
        - message
        - response
      type: object

    TemplateResponseData:
      $ref: "./schemas/templateresponsedata.yaml#/TemplateResponseData"

    TemplateDataResponse:
      description: >-
        The template data including the template name and [Edit](#tocs_edit).
      properties:
        success:
          description: "`true` if successfully returned, else `false`."
          type: boolean
          example: true
        message:
          description: "`OK`, `Bad Request` or an error message."
          type: string
          example: OK
        response:
          description: "`TemplateDataResponseData` or an error message."
          $ref: "#/components/schemas/TemplateDataResponseData"
      required:
        - success
        - message
        - response
      type: object

    TemplateDataResponseData:
      description: The response data returned with the [TemplateDataResponse](#tocs_templatedataresponse).
      properties:
        id:
          description:  The unique id of the template in UUID format.
          type: string
          example: f5493c17-d01f-445c-bb49-535fae65f219
        name:
          description: The template name.
          type: string
          example: My template
        owner:
          description: The owner id of the templates.
          type: string
          example: 5ca6hu7s9k
        template:
          description: The [Edit](#tocs_edit) template.
          $ref: "#/components/schemas/Edit"
          example:
            $ref: "./definitions/edit.yaml"
      required:
        - id
        - name
        - owner
        - template
      type: object

    TemplateListResponse:
      description: >-
        A list of previously saved templates.
      properties:
        success:
          description: "`true` if successfully returned, else `false`."
          type: boolean
          example: true
        message:
          description: "`OK`, `Bad Request` or an error message."
          type: string
          example: OK
        response:
          description: "`TemplateListResponseData` or an error message."
          $ref: "#/components/schemas/TemplateListResponseData"
      required:
        - success
        - message
        - response
      type: object

    TemplateListResponseData:
      description: The response data returned with the [TemplateListResponse](#tocs_templatelistresponse).
      properties:
        owner:
          description: The owner id of the templates.
          type: string
          example: 5ca6hu7s9k
        templates:
          description: The list of templates.
          type: array
          items:
            $ref: "#/components/schemas/TemplateListResponseItem"
      required:
        - owner
        - templates
      type: object

    TemplateListResponseItem:
      $ref: "./schemas/templatelistresponseitem.yaml#/TemplateListResponseItem"

    ProbeResponse:
      $ref: "./schemas/proberesponse.yaml#/ProbeResponse"

    AssetResponse:
      description: >-
        The response returned by the Serve API [get asset](#get-asset) request. Includes details of a hosted video,
        image, audio file, thumbnail or poster image. The response follows the [json:api](https://jsonapi.org/)
        specification.
      properties:
        data:
          description: An asset resource.
          $ref: "#/components/schemas/AssetResponseData"
      required:
        - data
      type: object

    AssetRenderResponse:
      description: >-
        The response returned by the Serve API [get asset by render id](#get-asset-by-render-id) request. The response 
        is an array of asset resources, including video, image, audio, thumbnail and poster image. The response follows 
        the [json:api](https://jsonapi.org/) specification.
      properties:
        data:
          type: array
          description: An array of asset resources grouped by render id.
          items:
            $ref: "#/components/schemas/AssetResponseData"
      required:
        - data
      type: object

    AssetResponseData:
      description: The type of resource (an asset) and attributes of the asset.
      properties:
        type:
          description: The type of resource, in this case it is an assets.
          type: string
          example: asset
        attributes:
          description: The asset attributes including render id, url, filename, file size, etc...
          $ref: "#/components/schemas/AssetResponseAttributes"
      required:
        - type
        - attributes
      type: object

    AssetResponseAttributes:
      $ref: "./schemas/assetresponseattributes.yaml#/AssetResponseAttributes"

  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    DeveloperKey:
      description: >-
        Set the **x-api-key** header with your provided key for the correct
        environment (v1 or stage). Include the header in all calls to the API
        that are secured with a key.
      type: apiKey
      in: header
      name: x-api-key
  links: {}
  callbacks: {}
